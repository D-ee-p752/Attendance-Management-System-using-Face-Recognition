import cv2
import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display
image_path = r"C:\Users\DEEPIKA\OneDrive\Desktop\Project FD\Couple.jpg" 
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Widget to display Before vs After images
def display_before_after(before, after, title_before='Before', title_after='After'):
    fig, axs = plt.subplots(1, 2, figsize=(10, 5))
    axs[0].imshow(before)
    axs[0].set_title(title_before)
    axs[0].axis('off')
    axs[1].imshow(after)
    axs[1].set_title(title_after)
    axs[1].axis('off')
    plt.show()
#Edge Detection
edges = cv2.Canny(image,100,200)
display_before_after(image_rgb,edges,'Original Image','Edges Detected')
kernal_sharpening = np.array([
    [-1,-1,-1,-1,-1],
    [-1, 1 ,1 ,1,-1],
    [-1, 1,10, 1,-1],
    [-1, 1, 1, 1,-1],
    [-1,-1,-1,-1,-1]
])
sharpened = cv2.filter2D(image,-1,kernal_sharpening)
display_before_after(image_rgb,cv2.cvtColor(sharpened,cv2.COLOR_BGR2RGB),'Original Image','Sharpened Image')
blurred = cv2.GaussianBlur(image,(15,15),0)
display_before_after(image_rgb,cv2.cvtColor(blurred,cv2.COLOR_BGR2RGB),'Original Image','Blurred Image')
resized = cv2.resize(image,(image.shape[1]//2,image.shape[1]//2))
display_before_after(image_rgb,cv2.cvtColor(resized,cv2.COLOR_BGR2RGB),'Original Image','Resized Image')
(h,w)=image.shape[:2]
center =(w//2,h//2)
M = cv2.getRotationMatrix2D(center,45,1.0)
rotated =cv2.warpAffine(image,M,(w,h))
display_before_after(image_rgb,cv2.cvtColor(rotated,cv2.COLOR_BGR2RGB),'Original Image','Rotated Image')
def augment_image(img):
    flipped = cv2.flip(img, 1)  
    rotated = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)  # Rotate 90 degrees
    bright = cv2.convertScaleAbs(img, alpha=1.2, beta=30)  # Brightness adjustment
    return flipped, rotated, bright

flipped, rotated, bright = augment_image(image_rgb)

# Display augmented images
titles = ['Original', 'Flipped', 'Rotated', 'Brightened']
images = [image_rgb, flipped, rotated, bright]

plt.figure(figsize=(12, 6))
for i, (img, title) in enumerate(zip(images, titles)):
    plt.subplot(1, 4, i + 1)
    plt.imshow(img)
    plt.title(title)
    plt.axis('off')
plt.tight_layout()
plt.show()
cropped = image_rgb[50:200, 100:300]  
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image_rgb)
plt.title("Original")
plt.axis("off")
plt.subplot(1, 2, 2)
plt.imshow(cropped)
plt.title("Cropped")
plt.axis("off")
plt.tight_layout()
plt.show()
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
negative_image = 255 - gray_image
titles = ['Original', 'Black & White', 'Negative']
images = [image, gray_image, negative_image]
plt.figure(figsize=(12, 4))
for i, (img, title) in enumerate(zip(images, titles)):
    plt.subplot(1, 3, i + 1)
    cmap = 'gray' if i > 0 else None  
    plt.imshow(img if cmap is None else img, cmap=cmap)
    plt.title(title)
    plt.axis('off')
plt.tight_layout()
plt.show()
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
gray_image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
faces = face_cascade.detectMultiScale(
    gray_image,
    scaleFactor=1.1,  
    minNeighbors=5,   
    minSize=(30, 30)  
)
face_detected_image = image_rgb.copy()
for (x,y,w,h) in faces:
    cv2.rectangle(face_detected_image,(x,y),(x+w,y+h),(255,0,0),2 )
display_before_after(image_rgb,face_detected_image,'Original Image','Faces Detection' )
